load('ext://dotenv', 'dotenv')

def dotenv_watch(dot_env_path='.env'):
  if os.path.exists(dot_env_path):
    dotenv()

  watch_file(dot_env_path)

valid_types = ['string', 'int', 'bool', 'string_list']

def define_config(key, default=None, type='string', required=False):
  if not type in valid_types:
    fail('Unknown type: %s' % type)

  if type == 'string':
    config.define_string(key)
  elif type == 'int':
    config.define_string(key)
  elif type == 'bool':
    config.define_bool(key)
  elif type == 'string_list':
    config.define_string_list(key)

  def get_value(cfg):
    env_name = key.upper().replace('-', '_')
    default_value = os.environ.get(env_name, default)
    value = cfg.get(key, default_value)

    if required and value == None:
      fail('Missing required config: %s' % key)

    if type == 'string':
      return value

    if type == 'int':
      return int(value)

    if type == 'bool':
      return bool(value)

  return get_value

def dict_merge(a, b):
  c = {}
  c.update(a)
  c.update(b)
  return c

def bool_to_string(value):
  return 'true' if value else 'false'

def string_to_bool(value):
  v = value.lower()

  is_true = v == 'true' or v == '1' or v == 'yes' or v == 'on' or v == 'y' or v == 't' or v == 'enabled' or v == 'enable' or v == 'active' or v == 'activated'

  if is_true:
    return True

  is_false = v == 'false' or v == '0' or v == 'no' or v == 'off' or v == 'n' or v == 'disabled' or v == 'disable' or v == 'inactive' or v == 'deactivated'

  if is_false:
    return False

  fail('Invalid boolean value: %s' % value)
